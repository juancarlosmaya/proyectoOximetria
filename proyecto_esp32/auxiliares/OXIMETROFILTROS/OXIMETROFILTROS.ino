float resultadoPasaBajos[500];
float resultadoPasaAltos[500];
float resultadoPasaAltos2[500];
float resultadoPasaBajos2[500];
float imprimirPasaBajos[500];
float imprimirPasaAltos[500];
float senal[500]={122741, 122762, 122778, 122776, 122790, 122810, 122796, 122807, 122860, 122886, 122856, 122747, 122673, 122586, 122458, 122318, 122263, 122243, 122215, 122150, 122076, 122064, 122017, 121991, 121972, 121974, 122014, 122055, 122039, 122037, 122064, 122056, 122078, 122069, 122131, 122209, 122214, 122218, 122211, 122216, 122212, 122203, 122219, 122278, 122326, 122318, 122294, 122321, 122322, 122322, 122309, 122322, 122419, 122460, 122466, 122456, 122486, 122501, 122518, 122493, 122600, 122658, 122708, 122705, 122724, 122731, 122742, 122734, 122786, 122849, 122893, 122906, 122851, 122801, 122732, 122615, 122485, 122414, 122359, 122316, 122225, 122151, 122110, 122059, 122014, 121957, 121984, 122040, 122054, 122013, 122009, 122021, 122054, 122059, 122056, 122099, 122203, 122221, 122202, 122233, 122244, 122247, 122241, 122261, 122316, 122345, 122320, 122307, 122321, 122331, 122346, 122330, 122362, 122453, 122468, 122498, 122466, 122505, 122515, 122530, 122537, 122568, 122650, 122680, 122657, 122684, 122714, 122723, 122707, 122753, 122813, 122862, 122860, 122798, 122761, 122684, 122582, 122420, 122337, 122283, 122215, 122110, 122037, 121977, 121927, 121884, 121825, 121834, 121869, 121879, 121856, 121840, 121861, 121877, 121876, 121883, 121961, 122035, 122066, 122066, 122109, 122116, 122126, 122093, 122143, 122190, 122216, 122256, 122207, 122231, 122254, 122255, 122241, 122273, 122344, 122422, 122430, 122407, 122427, 122464, 122463, 122444, 122496, 122577, 122614, 122656, 122649, 122675, 122702, 122708, 122687, 122752, 122797, 122841, 122806, 122721, 122668, 122568, 122458, 122302, 122256, 122239, 122156, 122088, 121987, 121952, 121919, 121863, 121812, 121883, 121910, 121891, 121875, 121896, 121911, 121929, 121890, 121966, 122064, 122119, 122124, 122127, 122158, 122171, 122162, 122128, 122188, 122245, 122278, 122271, 122271, 122297, 122300, 122314, 122329, 122373, 122439, 122499, 122482, 122503, 122509, 122544, 122554, 122558, 122609, 122689, 122734, 122757, 122752, 122773, 122806, 122796, 122786, 122853, 122919, 122916, 122879, 122825, 122757, 122632, 122513, 122424, 122387, 122340, 122263, 122187, 122148, 122111, 122074, 122042, 122052, 122094, 122112, 122072, 122052, 122071, 122101, 122101, 122108, 122196, 122274, 122288, 122287, 122323, 122326, 122320, 122319, 122330, 122405, 122450, 122433, 122441, 122440, 122451, 122457, 122438, 122490, 122572, 122603, 122628, 122612, 122634, 122653, 122634, 122648, 122713, 122792, 122829, 122819, 122823, 122876, 122876, 122869, 122890, 122949, 123009, 122989, 122935, 122880, 122789, 122684, 122570, 122505, 122473, 122440, 122372, 122315, 122287, 122278, 122228, 122211, 122212, 122270, 122281, 122270, 122258, 122285, 122309, 122319, 122306, 122377, 122455, 122463, 122450, 122457, 122482, 122482, 122465, 122502, 122528, 122576, 122600, 122567, 122573, 122592, 122601, 122597, 122638, 122700, 122759, 122745, 122743, 122758, 122781, 122784, 122772, 122825, 122878, 122921, 122935, 122951, 122979, 122981, 122991, 122966, 122996, 123025, 123009, 122908, 122781, 122714, 122613, 122514, 122425, 122420, 122449, 122401, 122346, 122325, 122303, 122302, 122258, 122270, 122308, 122345, 122352, 122343, 122361, 122385, 122387, 122373, 122424, 122506, 122535, 122531, 122501, 122502, 122511, 122495, 122485, 122525, 122591, 122587, 122573, 122583, 122619, 122611, 122605, 122664, 122723, 122777, 122784, 122787, 122801, 122822, 122835, 122824, 122860, 122931, 122987, 122995, 122979, 123030, 123036, 123034, 122992, 122993, 123010, 122945, 122852, 122730, 122636, 122554, 122473, 122407, 122398, 122407, 122382, 122337, 122320, 122296, 122272, 122242, 122263, 122297, 122336, 122353, 122351, 122361, 122402, 122396, 122408, 122434, 122510, 122540, 122532, 122506, 122518, 122526, 122517, 122483, 122531, 122613, 122647, 122649, 122637, 122650, 122670, 122685, 122650, 122724, 122795, 122846, 122856, 122844, 122875, 122889, 122871, 122888, 122935, 123009, 123038, 123044, 123050, 123064, 123055, 123014, 122999, 122985, 122919};
float hamming[500]={0.08, 0.08003647, 0.08014586, 0.08032815, 0.08058333, 0.08091135, 0.08131215, 0.08178567, 0.08233184, 0.08295058, 0.08364177, 0.08440532, 0.0852411 , 0.08614898, 0.08712882, 0.08818046, 0.08930373, 0.09049846, 0.09176445, 0.09310151, 0.09450942, 0.09598796, 0.0975369 , 0.09915599, 0.10084497, 0.10260358, 0.10443154, 0.10632855, 0.10829432, 0.11032854, 0.11243087, 0.114601  , 0.11683857, 0.11914323, 0.12151461, 0.12395235, 0.12645605, 0.12902531, 0.13165973, 0.13435889, 0.13712236, 0.13994971, 0.14284048, 0.14579422, 0.14881046, 0.15188872, 0.15502852, 0.15822935, 0.16149071, 0.16481208, 0.16819293, 0.17163273, 0.17513093, 0.17868699, 0.18230032, 0.18597037, 0.18969655, 0.19347827, 0.19731492, 0.20120591, 0.20515061, 0.2091484 , 0.21319865, 0.2173007 , 0.22145392, 0.22565765, 0.22991121, 0.23421393, 0.23856514, 0.24296414, 0.24741023, 0.2519027 , 0.25644086, 0.26102397, 0.26565131, 0.27032215, 0.27503575, 0.27979135, 0.28458821, 0.28942556, 0.29430265, 0.29921868, 0.30417289, 0.30916449, 0.31419268, 0.31925668, 0.32435568, 0.32948886, 0.33465542, 0.33985454, 0.34508538, 0.35034713, 0.35563895, 0.36096   , 0.36630944, 0.37168641, 0.37709007, 0.38251955, 0.38797401, 0.39345257, 0.39895436, 0.40447851, 0.41002415, 0.4155904 , 0.42117637, 0.42678118, 0.43240394, 0.43804376, 0.44369975, 0.449371  , 0.45505662, 0.46075571, 0.46646736, 0.47219067, 0.47792473, 0.48366863, 0.48942147, 0.49518232, 0.50095028, 0.50672443, 0.51250386, 0.51828764, 0.52407487, 0.52986462, 0.53565598, 0.54144803, 0.54723984, 0.55303051, 0.55881912, 0.56460474, 0.57038646, 0.57616336, 0.58193453, 0.58769905, 0.59345601, 0.59920449, 0.60494359, 0.61067239, 0.61638998, 0.62209546, 0.62778793, 0.63346648, 0.63913021, 0.64477823, 0.65040963, 0.65602352, 0.66161903, 0.66719525, 0.6727513 , 0.67828631, 0.68379939, 0.68928967, 0.69475629, 0.70019836, 0.70561504, 0.71100547, 0.71636878, 0.72170412, 0.72701066, 0.73228755, 0.73753396, 0.74274904, 0.74793198, 0.75308196, 0.75819815, 0.76327974, 0.76832594, 0.77333594, 0.77830894, 0.78324416, 0.78814081, 0.79299813, 0.79781533, 0.80259165, 0.80732635, 0.81201866, 0.81666784, 0.82127316, 0.82583388, 0.83034929, 0.83481866, 0.83924129, 0.84361648, 0.84794353, 0.85222176, 0.85645049, 0.86062904, 0.86475676, 0.86883299, 0.87285709, 0.87682842, 0.88074634, 0.88461024, 0.8884195 , 0.89217352, 0.89587171, 0.89951347, 0.90309824, 0.90662543, 0.9100945 , 0.9135049 , 0.91685608, 0.92014751, 0.92337866, 0.92654904, 0.92965813, 0.93270544, 0.93569049, 0.9386128 , 0.94147192, 0.94426739, 0.94699876, 0.9496656 , 0.95226749, 0.95480402, 0.95727479, 0.9596794 , 0.96201747, 0.96428863, 0.96649252, 0.96862879, 0.97069711, 0.97269714, 0.97462857, 0.97649109, 0.97828441, 0.98000824, 0.98166231, 0.98324635, 0.98476012, 0.98620338, 0.98757589, 0.98887744, 0.99010783, 0.99126685, 0.99235433, 0.99337008, 0.99431396, 0.99518581, 0.99598549, 0.99671288, 0.99736786, 0.99795032, 0.99846018, 0.99889735, 0.99926176, 0.99955337, 0.99977211, 0.99991795, 0.99999088, 0.99999088, 0.99991795, 0.99977211, 0.99955337, 0.99926176, 0.99889735, 0.99846018, 0.99795032, 0.99736786, 0.99671288, 0.99598549, 0.99518581, 0.99431396, 0.99337008, 0.99235433, 0.99126685, 0.99010783, 0.98887744, 0.98757589, 0.98620338, 0.98476012, 0.98324635, 0.98166231, 0.98000824, 0.97828441, 0.97649109, 0.97462857, 0.97269714, 0.97069711, 0.96862879, 0.96649252, 0.96428863, 0.96201747, 0.9596794 , 0.95727479, 0.95480402, 0.95226749, 0.9496656 , 0.94699876, 0.94426739, 0.94147192, 0.9386128 , 0.93569049, 0.93270544, 0.92965813, 0.92654904, 0.92337866, 0.92014751, 0.91685608, 0.9135049 , 0.9100945 , 0.90662543, 0.90309824, 0.89951347, 0.89587171, 0.89217352, 0.8884195 , 0.88461024, 0.88074634, 0.87682842, 0.87285709, 0.86883299, 0.86475676, 0.86062904, 0.85645049, 0.85222176, 0.84794353, 0.84361648, 0.83924129, 0.83481866, 0.83034929, 0.82583388, 0.82127316, 0.81666784, 0.81201866, 0.80732635, 0.80259165, 0.79781533, 0.79299813, 0.78814081, 0.78324416, 0.77830894, 0.77333594, 0.76832594, 0.76327974, 0.75819815, 0.75308196, 0.74793198, 0.74274904, 0.73753396, 0.73228755, 0.72701066, 0.72170412, 0.71636878, 0.71100547, 0.70561504, 0.70019836, 0.69475629, 0.68928967, 0.68379939, 0.67828631, 0.6727513 , 0.66719525, 0.66161903, 0.65602352, 0.65040963, 0.64477823, 0.63913021, 0.63346648, 0.62778793, 0.62209546, 0.61638998, 0.61067239, 0.60494359, 0.59920449, 0.59345601, 0.58769905, 0.58193453, 0.57616336, 0.57038646, 0.56460474, 0.55881912, 0.55303051, 0.54723984, 0.54144803, 0.53565598, 0.52986462, 0.52407487, 0.51828764, 0.51250386, 0.50672443, 0.50095028, 0.49518232, 0.48942147, 0.48366863, 0.47792473, 0.47219067, 0.46646736, 0.46075571, 0.45505662, 0.449371  , 0.44369975, 0.43804376, 0.43240394, 0.42678118, 0.42117637, 0.4155904 , 0.41002415, 0.40447851, 0.39895436, 0.39345257, 0.38797401, 0.38251955, 0.37709007, 0.37168641, 0.36630944, 0.36096   , 0.35563895, 0.35034713, 0.34508538, 0.33985454, 0.33465542, 0.32948886, 0.32435568, 0.31925668, 0.31419268, 0.30916449, 0.30417289, 0.29921868, 0.29430265, 0.28942556, 0.28458821, 0.27979135, 0.27503575, 0.27032215, 0.26565131, 0.26102397, 0.25644086, 0.2519027 , 0.24741023, 0.24296414, 0.23856514, 0.23421393, 0.22991121, 0.22565765, 0.22145392, 0.2173007 , 0.21319865, 0.2091484 , 0.20515061, 0.20120591, 0.19731492, 0.19347827, 0.18969655, 0.18597037, 0.18230032, 0.17868699, 0.17513093, 0.17163273, 0.16819293, 0.16481208, 0.16149071, 0.15822935, 0.15502852, 0.15188872, 0.14881046, 0.14579422, 0.14284048, 0.13994971, 0.13712236, 0.13435889, 0.13165973, 0.12902531, 0.12645605, 0.12395235, 0.12151461, 0.11914323, 0.11683857, 0.114601  , 0.11243087, 0.11032854, 0.10829432, 0.10632855, 0.10443154, 0.10260358, 0.10084497, 0.09915599, 0.0975369 , 0.09598796, 0.09450942, 0.09310151, 0.09176445, 0.09049846, 0.08930373, 0.08818046, 0.08712882, 0.08614898, 0.0852411 , 0.08440532, 0.08364177, 0.08295058, 0.08233184, 0.08178567, 0.08131215, 0.08091135, 0.08058333, 0.08032815, 0.08014586, 0.08003647, 0.08};
     
float calculoFrecuenciaCardiaca(float entrada[500]);

void setup() {
  Serial.begin(115200);
}

void loop() {
  // put your main code here, to run repeatedly:

    Serial.print("ANALIZANDO señal \n");
    
    float valorDC;
    int i;
    ///---------------CALCULAR Y ELIMINAR EL VALOR DC---------------
    
    // Filtro pasa bajos a 1 Hz
    float b[4]= {2.91464945e-05, 8.74394834e-05, 8.74394834e-05, 2.91464945e-05};
    float a[4]= {1, -2.87435689,  2.7564832, -0.88189313};
    resultadoPasaBajos[0]=senal[0];
    resultadoPasaBajos[1]=senal[0];
    resultadoPasaBajos[2]=senal[0];
    senal[1]=senal[0];
    senal[2]=senal[0];
    senal[3]=senal[0];
    for ( i = 3; i < 499; i++ ) {
        resultadoPasaBajos[i] =senal[i]*b[0]+senal[i-1]*b[1]+senal[i-2]*b[2]+senal[i-3]*b[3]-(resultadoPasaBajos[i-1]*a[1]+resultadoPasaBajos[i-2]*a[2]+resultadoPasaBajos[i-3]*a[3]);
        //Serial.print( "%f\n", resultadoPasaBajos[i]);
    }

    valorDC=0;
    for ( i = 200; i < 499; i++ ) {
        valorDC=valorDC+resultadoPasaBajos[i];
    }
    valorDC=valorDC/300;

    for ( i = 0; i < 499; i++ ) {
        senal[i]=senal[i]-valorDC;
        //Serial.print( "%f\n", senal[i]);
    }
    Serial.print("el valor DC es");
    Serial.print(valorDC);
    ///-------------------------------------------------------------



    ///---------------CALCULAR EL VALOR AC--------------------------    
    
    // Filtro pasa altos a 0.5 Hz
    b[0]=0.96907117; b[1]=-2.90721352;  b[2]=2.90721352; b[3]=-0.96907117;
    a[0]=1; a[1]=-2.93717073; a[2]=2.87629972; a[3]=-0.93909894;
    senal[0]=senal[0]/2;
    resultadoPasaAltos[0]=senal[0];
    resultadoPasaAltos[1]=senal[0];
    resultadoPasaAltos[2]=senal[0];
    senal[1]=senal[0];
    senal[2]=senal[0];
    senal[3]=senal[0];
    for ( i = 3; i < 499; i++ ) {
        resultadoPasaAltos[i] =senal[i]*b[0]+senal[i-1]*b[1]+senal[i-2]*b[2]+senal[i-3]*b[3]-(resultadoPasaAltos[i-1]*a[1]+resultadoPasaAltos[i-2]*a[2]+resultadoPasaAltos[i-3]*a[3]);
        //Serial.print( "%f\n", resultadoPasaAltos[i]);
    }

    // INICIO IMPRIMIR
    // Filtro pasa altos a 0.5 Hz
    b[0]=0.96907117; b[1]=-2.90721352;  b[2]=2.90721352; b[3]=-0.96907117;
    a[0]=1; a[1]=-2.93717073; a[2]=2.87629972; a[3]=-0.93909894;
    resultadoPasaAltos[0]=resultadoPasaAltos[0]/2;
    imprimirPasaAltos[0]=resultadoPasaAltos[0];
    imprimirPasaAltos[1]=resultadoPasaAltos[0];
    imprimirPasaAltos[2]=resultadoPasaAltos[0];
    resultadoPasaAltos[1]=resultadoPasaAltos[0];
    resultadoPasaAltos[2]=resultadoPasaAltos[0];
    resultadoPasaAltos[3]=resultadoPasaAltos[0];
    for ( i = 3; i < 499; i++ ) {
        imprimirPasaAltos[i] =resultadoPasaAltos[i]*b[0]+resultadoPasaAltos[i-1]*b[1]+resultadoPasaAltos[i-2]*b[2]+resultadoPasaAltos[i-3]*b[3]-(imprimirPasaAltos[i-1]*a[1]+imprimirPasaAltos[i-2]*a[2]+imprimirPasaAltos[i-3]*a[3]);
        //Serial.print( "%f\n", imprimirPasaAltos[i]);
    }
    // filtro pasa bajos a 5 Hz.
    b[0]=0.00289819; b[1]=0.00869458;  b[2]=0.00869458; b[3]=0.00289819;
    a[0]=1; a[1]=-2.37409474; a[2]=1.92935567; a[3]=-0.53207537;
    imprimirPasaAltos[0]=imprimirPasaAltos[0]/2;
    imprimirPasaBajos[0]=imprimirPasaAltos[0];
    imprimirPasaBajos[1]=imprimirPasaAltos[0];
    imprimirPasaBajos[2]=imprimirPasaAltos[0];
    imprimirPasaAltos[1]=imprimirPasaAltos[0];
    imprimirPasaAltos[2]=imprimirPasaAltos[0];
    imprimirPasaAltos[3]=imprimirPasaAltos[0];
    for ( i = 3; i < 499; i++ ) {
        imprimirPasaBajos[i] =imprimirPasaAltos[i]*b[0]+imprimirPasaAltos[i-1]*b[1]+imprimirPasaAltos[i-2]*b[2]+imprimirPasaAltos[i-3]*b[3]-(imprimirPasaBajos[i-1]*a[1]+imprimirPasaBajos[i-2]*a[2]+imprimirPasaBajos[i-3]*a[3]);
        //Serial.println(imprimirPasaBajos[i]);
    }
    // FIN IMPRIMIR
    
    // ventana hamming 
    for ( i = 0; i < 499; i++ ) {
        resultadoPasaAltos[i]=resultadoPasaAltos[i]*hamming[i];
        //Serial.println(resultadoPasaAltos[i]);
    }

    // Filtro pasa altos a 0.5 Hz
    b[0]=0.96907117; b[1]=-2.90721352;  b[2]=2.90721352; b[3]=-0.96907117;
    a[0]=1; a[1]=-2.93717073; a[2]=2.87629972; a[3]=-0.93909894;
    resultadoPasaAltos[0]=resultadoPasaAltos[0]/2;
    resultadoPasaAltos2[0]=resultadoPasaAltos[0];
    resultadoPasaAltos2[1]=resultadoPasaAltos[0];
    resultadoPasaAltos2[2]=resultadoPasaAltos[0];
    resultadoPasaAltos[1]=resultadoPasaAltos[0];
    resultadoPasaAltos[2]=resultadoPasaAltos[0];
    resultadoPasaAltos[3]=resultadoPasaAltos[0];
    for ( i = 3; i < 499; i++ ) {
        resultadoPasaAltos2[i] =resultadoPasaAltos[i]*b[0]+resultadoPasaAltos[i-1]*b[1]+resultadoPasaAltos[i-2]*b[2]+resultadoPasaAltos[i-3]*b[3]-(resultadoPasaAltos2[i-1]*a[1]+resultadoPasaAltos2[i-2]*a[2]+resultadoPasaAltos2[i-3]*a[3]);
        //Serial.print( "%f\n", resultadoPasaAltos2[i]);
    }

    // filtro pasa bajos a 5 Hz.
    b[0]=0.00289819; b[1]=0.00869458;  b[2]=0.00869458; b[3]=0.00289819;
    a[0]=1; a[1]=-2.37409474; a[2]=1.92935567; a[3]=-0.53207537;
    resultadoPasaAltos2[0]=resultadoPasaAltos2[0]/2;
    resultadoPasaBajos2[0]=resultadoPasaAltos2[0];
    resultadoPasaBajos2[1]=resultadoPasaAltos2[0];
    resultadoPasaBajos2[2]=resultadoPasaAltos2[0];
    resultadoPasaAltos2[1]=resultadoPasaAltos2[0];
    resultadoPasaAltos2[2]=resultadoPasaAltos2[0];
    resultadoPasaAltos2[3]=resultadoPasaAltos2[0];
    
    for ( i = 3; i < 499; i++ ) {
        resultadoPasaBajos2[i] =resultadoPasaAltos2[i]*b[0]+resultadoPasaAltos2[i-1]*b[1]+resultadoPasaAltos2[i-2]*b[2]+resultadoPasaAltos2[i-3]*b[3]-(resultadoPasaBajos2[i-1]*a[1]+resultadoPasaBajos2[i-2]*a[2]+resultadoPasaBajos2[i-3]*a[3]);
    }

    for ( i = -1; i < 500; i++ ) {
      Serial.println(resultadoPasaBajos2[i]);
    }

    float frecuenciaCardiaca=calculoFrecuenciaCardiaca(resultadoPasaBajos2);
    Serial.print("El cálculo de la frecuencia cardíaca es de: ");
    Serial.println(frecuenciaCardiaca);


  while(1){}

}

float calculoFrecuenciaCardiaca(float entrada[500]){
    int cruces[500];
    int ubicacionCruces[500];
    int i;
    for (i=0;i<500;i++){
        cruces[i]=0;
    }
    for (i=0;i<500;i++){
        ubicacionCruces[i]=0;
    }
    int j=0;
    for (i=0;i<500;i++){
        if (resultadoPasaBajos2[i]<0 && resultadoPasaBajos2[i+1]>0){
            cruces[i]=100;
            ubicacionCruces[j]=i;
            j=j+1;
        }
    }
    for (i=0;i<500;i++){
        //printf( "%d\n", ubicacionCruces[i]);
    }
    float frecuencias[100];
    for (i=0;i<100;i++){
        frecuencias[i]=0;
    }
    i=0;
    while ((ubicacionCruces[i]>0) && (ubicacionCruces[i+1]>0)){
        frecuencias[i]=(float)100/(ubicacionCruces[i+1]-ubicacionCruces[i]);
        i=i+1;    
    }
    for (i=0;i<100;i++){
        //printf( "%f\n", frecuencias[i]);
    }
    float frecuenciaPromedio;
    i=0;
    frecuenciaPromedio=0;
    while (frecuencias[i]>0){
        frecuenciaPromedio=frecuenciaPromedio+frecuencias[i];
        i=i+1;
    }
    frecuenciaPromedio=frecuenciaPromedio/i;
    frecuenciaPromedio=60*frecuenciaPromedio;
    
    return frecuenciaPromedio;

}
